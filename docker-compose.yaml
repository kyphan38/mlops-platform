services:

  ###################################################################### DAGSTER ######################################################################
  # Dagster
  dagster:
    image: dagster:latest
    build:
      context: ./configs/dagster
      dockerfile: Dockerfile
    container_name: dagster

  # Dagster dagit: web interface
  dagster_dagit:
    image: dagster:latest
    container_name: dagster_dagit
    ports:
      - "3001:3001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/dagster/dagster_home:/opt/dagster/dagster_home
    env_file:
      - ./.env
    networks:
      - net
    depends_on:
      - dagster_postgres
      - pipeline
      - mtl_pipeline
      - training_pipeline
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml

  # Dagster daemon: Schedule and orchestrate pipeline executions
  dagster_daemon:
    image: dagster:latest
    container_name: dagster_daemon
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/dagster/dagster_home:/opt/dagster/dagster_home
    env_file:
      - ./.env
    networks:
      - net
    depends_on:
      - dagster_postgres
      - pipeline
      - mtl_pipeline
    entrypoint:
      - dagster-daemon
      - run

  ###################################################################### MINIO ######################################################################
  # Minio server for data storage
  minio_server:
    image: minio_server:latest
    build:
      context: ./configs/minio/server
      dockerfile: Dockerfile
    container_name: minio_server
    hostname: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./logs/minio:/data
    env_file:
      - ./.env
    networks:
      - net
    command: ["server", "/data", "--console-address", ":9001"]

  # Minio client for UNIX command
  minio_client:
    image: minio_client:latest
    build:
      context: ./configs/minio/client
      dockerfile: Dockerfile
    container_name: minio_client
    hostname: mc
    env_file:
      - ./.env
    networks:
      - net
    depends_on:
      - minio_server
    entrypoint: /bin/sh -c "until (/usr/bin/mc config host add minio http://minio:9000 minio minio123); do echo '...waiting...' && sleep 1; done; /usr/bin/mc mb minio/warehouse; /usr/bin/mc policy set public minio/warehouse; exit 0;"

  ###################################################################### PIPELINES ######################################################################
  # Data ETL Pipeline
  pipeline:
    image: pipeline:latest
    build:
      context: ./src/data/pipeline
      dockerfile: Dockerfile
    container_name: pipeline
    user: root
    ports:
      - "4000:4000"
    volumes:
      - ./src/data/pipeline:/opt/dagster/app
    env_file:
      - ./.env
    networks:
     - net

  # Pipeline for materializing offline store into online store
  mtl_pipeline:
    image: mtl_pipeline:latest
    build:
      context: ./src/data/mtl_pipeline
      dockerfile: Dockerfile
    container_name: mtl_pipeline
    user: root
    ports:
      - "4001:4001"
    volumes:
      - ./src/data/mtl_pipeline:/opt/dagster/app
    env_file:
      - ./.env
    networks:
     - net

  # Pipeline for training model
  training_pipeline:
    image: training_pipeline:latest
    build:
      context: ./src/data/training_pipeline
      dockerfile: Dockerfile
    container_name: training_pipeline
    user: root
    ports:
      - "4002:4002"
    volumes:
      - ./src/data/training_pipeline:/opt/dagster/app
    env_file:
      - ./.env
    networks:
     - net

  ###################################################################### DATABASES ######################################################################
  # Postgres for Dagster
  dagster_postgres:
    image: dagster_postgres:latest
    build:
      context: ./configs/postgres/dagster
      dockerfile: Dockerfile
    container_name: dagster_postgres
    ports:
      - "5432:5432"
    volumes:
      - ./logs/dagster_postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      POSTGRES_HOST: ${DAGSTER_POSTGRES_HOST}
      POSTGRES_PORT: ${DAGSTER_POSTGRES_PORT}
    networks:
      - net

  # Postgres for Feast offline store
  feast_postgres:
    image: feast_postgres:latest
    build:
      context: ./configs/postgres/feast
      dockerfile: Dockerfile
    container_name: feast_postgres
    ports:
      - "5433:5432"
    volumes:
      - ./logs/feast_postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${FEAST_POSTGRES_DB}
      POSTGRES_USER: ${FEAST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FEAST_POSTGRES_PASSWORD}
      POSTGRES_HOST: ${FEAST_POSTGRES_HOST}
      POSTGRES_PORT: ${FEAST_POSTGRES_PORT}
    env_file:
      - ./.env
    networks:
      - net

  # Redis for Feast online store
  feast_redis:
    image: feast_redis:latest
    build:
      context: ./configs/redis
      dockerfile: Dockerfile
    container_name: feast_redis
    ports:
      - "6379:6379"
    volumes:
      - ./logs/feast_redis:/data
    env_file:
      - ./.env
    networks:
      - net

  # Postgres for MLflow
  mlflow_postgres:
    image: mlflow_postgres:latest
    build:
      context: ./configs/postgres/mlflow
      dockerfile: Dockerfile
    container_name: mlflow_postgres
    ports:
      - "5434:5432"
    volumes:
      - ./logs/mlflow_postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${MLFLOW_POSTGRES_DB}
      POSTGRES_USER: ${MLFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_PASSWORD}
      POSTGRES_HOST: ${MLFLOW_POSTGRES_HOST}
      POSTGRES_PORT: ${MLFLOW_POSTGRES_PORT}
    env_file:
      - ./.env
    networks:
      - net

  ###################################################################### TRACKING ######################################################################
  mlflow:
    image: mlflow:latest
    build:
      context: ./configs/mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./logs/mlflow:/mlflow/mlruns
    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_ENDPOINT_URL}
      MLFLOW_TRACKING_SQL_ALCHEMY_CONN: postgresql://${MLFLOW_POSTGRES_USER}:${MLFLOW_POSTGRES_PASSWORD}@${MLFLOW_POSTGRES_HOST}:${MLFLOW_POSTGRES_PORT}/${MLFLOW_POSTGRES_DB}
    env_file:
      - ./.env
    networks:
      - net
    depends_on:
      - mlflow_postgres
    command: mlflow server --backend-store-uri postgresql://${MLFLOW_POSTGRES_USER}:${MLFLOW_POSTGRES_PASSWORD}@${MLFLOW_POSTGRES_HOST}:${MLFLOW_POSTGRES_PORT}/${MLFLOW_POSTGRES_DB} --default-artifact-root /mlflow/mlruns --host 0.0.0.0

  ###################################################################### TEST ######################################################################
  jupyter_notebook:
    image: jupyter_notebook:latest
    build:
      context: ./configs/jupyter
      dockerfile: Dockerfile
    container_name: jupyter_notebook
    ports:
      - "8888:8888"
    volumes:
      - ./logs/jupyter_notebook:/home/jovyan/logs
      - ./src/feast:/home/jovyan/feast
    env_file:
      - ./.env
    networks:
      - net
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''

networks:
  net:
    driver: bridge
    name: net
